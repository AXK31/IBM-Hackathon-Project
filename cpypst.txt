from flask import Flask, render_template, request
import os
from ibm_watsonx_ai import Credentials, APIClient
import PyPDF2
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_chroma import Chroma
from langchain_ibm import WatsonxEmbeddings
from langchain.docstore.document import Document
from langchain.chains import RetrievalQA
from ibm_watsonx_ai.foundation_models.utils.enums import ModelTypes
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.foundation_models.utils.enums import DecodingMethods
from langchain_ibm import WatsonxLLM

app = Flask(__name__)

# WatsonX credentials
credentials = Credentials(
    url="https://us-south.ml.cloud.ibm.com",
    api_key="9JAu6q17I5PwWYISP9HhsqvlygIkbygflVj6fZ74plwm",
)
project_id = os.getenv("PROJECT_ID", "97ea408b-8fee-4927-86e3-13fdc670ee98")
api_client = APIClient(credentials=credentials, project_id=project_id)

# Initialize Watsonx embeddings
embeddings = WatsonxEmbeddings(
    model_id="ibm/slate-30m-english-rtrvr",
    url=credentials.url,
    apikey=credentials.api_key,
    project_id=project_id,
)

# Initialize Granite model
parameters = {
    GenParams.DECODING_METHOD: DecodingMethods.GREEDY,
    GenParams.MIN_NEW_TOKENS: 1,
    GenParams.MAX_NEW_TOKENS: 100,
    GenParams.STOP_SEQUENCES: ["<|endoftext|>"]
}
model_id = "ibm/granite-3-8b-instruct"
watsonx_granite = WatsonxLLM(
    model_id=model_id,
    url=credentials.url,
    apikey=credentials.api_key,
    project_id=project_id,
    params=parameters
)

@app.route('/')
def index():
    """Render the HTML form."""
    return render_template('index.html')

@app.route('/process', methods=['POST'])
def process_file():
    """Handle file upload and query."""
    if 'file' not in request.files:
        return render_template('result.html', error="No file part in the request")

    file = request.files['file']

    if not file or file.filename == '':
        return render_template('result.html', error="No file selected")

    if not (file.filename.endswith('.pdf') or file.filename.endswith('.txt')):
        return render_template('result.html', error="Unsupported file type. Please upload a .pdf or .txt file.")

    # Read file content
    text = ""
    if file.filename.endswith('.pdf'):
        pdf_reader = PyPDF2.PdfReader(file)
        for page in pdf_reader.pages:
            text += page.extract_text()
    elif file.filename.endswith('.txt'):
        text = file.read().decode('utf-8')

    # Process text into chunks
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=512, chunk_overlap=0)
    texts = text_splitter.split_text(text)
    documents = [Document(page_content=chunk) for chunk in texts]

    # Create a vector store
    docsearch = Chroma.from_documents(documents, embeddings)

    # Build RetrievalQA
    qa = RetrievalQA.from_chain_type(
        llm=watsonx_granite,
        chain_type="stuff",
        retriever=docsearch.as_retriever()
    )

    # Query from user input
    query = request.form.get('query', "Default query?")
    response = qa.invoke(query)

    # Return the response as plain text
    return render_template('result.html', response=response)

if __name__ == '__main__':
    app.run(debug=True)





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Query Result</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Query Result</h1>
        {% if error %}
            <p class="error">{{ error }}</p>
        {% else %}
            <pre>{{ response }}</pre> <!-- Display the response as plain text -->
        {% endif %}
        <a href="/">Go Back</a>
    </div>
</body>
</html>

<div class="chat-container">
    <div class="chat-header">
        <h2>Chat</h2>
    </div>
    <div class="chat-messages">
        <div class="message bot">
            <span class="text">Hi! How can I help you today?</span>
        </div>
        <div class="message user">
            
        </div>
    </div>
    <div class="chat-input">
        <input type="text" placeholder="Type your message..." id="chatInput" />
        <button id="sendButton">Send</button>
    </div>
</div>


.chat-container {
    width: 100%;
    max-width: 400px;
    height: 600px;
    display: flex;
    flex-direction: column;
    border: 1px solid #ccc;
    border-radius: 10px;
    background-color: #fff;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.chat-header {
    background-color: #007bff;
    color: white;
    padding: 10px;
    text-align: center;
    font-size: 1.2rem;
    font-weight: bold;
}

.chat-messages {
    flex-grow: 1;
    padding: 10px;
    overflow-y: auto;
    background-color: #f4f6f9;
    display: flex;
    flex-direction: column;
    gap: 10px;

}

.message {
    display: flex;
    max-width: 80%;
}

.message .text {
    display: inline-block;
    padding: 10px;
    border-radius: 8px;
    font-size: 0.9rem;
    line-height: 1.4;
}

.message.user {
    align-self: flex-end;
}

.message.user .text {
    background-color: #007bff;
    color: white;
    border-radius: 8px 8px 0 8px;
}

.message.bot {
    align-self: flex-start;
}

.message.bot .text {
    background-color: #e9ecef;
    color: #333;
    border-radius: 8px 8px 8px 0;
}

.chat-input {
    display: flex;
    border-top: 1px solid #ccc;
    padding: 10px;
    background-color: #fff;
}

.chat-input input {
    flex-grow: 1;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
    font-size: 1rem;
}

.chat-input button {
    margin-left: 10px;
    padding: 10px 15px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
}

.chat-input button:hover {
    background-color: #0056b3;
}

from flask import Flask, render_template, request, jsonify
from ibm_watson import AssistantV2
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator

app = Flask(__name__)

# IBM Watson Assistant setup from Watson Studio
api_key = 'your-ibm-api-key'  # Replace with your API Key from IBM Watson Assistant service
service_url = 'your-service-url'  # Replace with your Watson Assistant service URL
assistant_id = 'your-assistant-id'  # Replace with your Watson Assistant ID

# Setup authenticator for Watson Assistant API
authenticator = IAMAuthenticator(api_key)
assistant = AssistantV2(
    version='2021-11-27',
    authenticator=authenticator
)
assistant.set_service_url(service_url)

# Create a session with Watson Assistant
def create_session():
    response = assistant.create_session(
        assistant_id=assistant_id
    ).get_result()
    return response['session_id']

# Send message to Watson Assistant and get response
def send_message(session_id, user_message):
    response = assistant.message(
        assistant_id=assistant_id,
        session_id=session_id,
        input={'message_type': 'text', 'text': user_message}
    ).get_result()
    return response['output']['generic'][0]['text']

@app.route('/')
def index():
    return render_template('base.html')

@app.route('/get_message', methods=['POST'])
def get_message():
    user_message = request.form['user_message']
    
    # Create a new session (you can persist session if required)
    session_id = create_session()

    # Send the user's message to Watson Assistant
    bot_response = send_message(session_id, user_message)
    
    return jsonify({'response': bot_response})

if __name__ == "__main__":
    app.run(debug=True)


{% extends "base.html" %}
{% block title %}Chat with MediCare{% endblock %}
{% block content %}
<div class="chat-container">
    <h1>Chat with MediCare</h1>
    
    <div id="chat-box">
        {% for message in chat_history %}
        <div class="chat-message user">
            <strong>You:</strong> {{ message.user }}
        </div>
        <div class="chat-message assistant">
            <strong>Assistant:</strong> {{ message.assistant }}
        </div>
        {% endfor %}
    </div>
    <div class="chat-input-section">
        <input type="text" id="user-input" placeholder="Type your message here..." />
        <button id="send-btn">Send</button>
        <button id="clear-btn">Clear</button>
    </div>
</div>

<script>
    const sendButton = document.getElementById('send-btn');
    const clearButton = document.getElementById('clear-btn');
    const inputField = document.getElementById('user-input');
    const chatBox = document.getElementById('chat-box');

    sendButton.addEventListener('click', async () => {
        const message = inputField.value.trim();
        if (!message) return;

        const response = await fetch('/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message }),
        });

        const data = await response.json();
        if (response.ok) {
            chatBox.innerHTML += `
                <div class="chat-message user"><strong>You:</strong> ${data.user}</div>
                <div class="chat-message assistant"><strong>Assistant:</strong> ${data.assistant}</div>
            `;
            inputField.value = '';
            chatBox.scrollTop = chatBox.scrollHeight; // Scroll to the bottom
        } else {
            alert(data.error || "An error occurred.");
        }
    });

    clearButton.addEventListener('click', async () => {
        await fetch('/clear_chat', { method: 'POST' });
        chatBox.innerHTML = '';
    });

    inputField.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendButton.click();
        }
    });
</script>
{% endblock %}